/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __KPROBE1_BPF_SKEL_H__
#define __KPROBE1_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

struct kprobe1_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *pid_map;
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *bpf_prog;
		struct bpf_program *bpf_prog2;
	} progs;
	struct {
		struct bpf_link *bpf_prog;
		struct bpf_link *bpf_prog2;
	} links;
	struct kprobe1_bpf__rodata {
	} *rodata;

#ifdef __cplusplus
	static inline struct kprobe1_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct kprobe1_bpf *open_and_load();
	static inline int load(struct kprobe1_bpf *skel);
	static inline int attach(struct kprobe1_bpf *skel);
	static inline void detach(struct kprobe1_bpf *skel);
	static inline void destroy(struct kprobe1_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
kprobe1_bpf__destroy(struct kprobe1_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
kprobe1_bpf__create_skeleton(struct kprobe1_bpf *obj);

static inline struct kprobe1_bpf *
kprobe1_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct kprobe1_bpf *obj;
	int err;

	obj = (struct kprobe1_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = kprobe1_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	kprobe1_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct kprobe1_bpf *
kprobe1_bpf__open(void)
{
	return kprobe1_bpf__open_opts(NULL);
}

static inline int
kprobe1_bpf__load(struct kprobe1_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct kprobe1_bpf *
kprobe1_bpf__open_and_load(void)
{
	struct kprobe1_bpf *obj;
	int err;

	obj = kprobe1_bpf__open();
	if (!obj)
		return NULL;
	err = kprobe1_bpf__load(obj);
	if (err) {
		kprobe1_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
kprobe1_bpf__attach(struct kprobe1_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
kprobe1_bpf__detach(struct kprobe1_bpf *obj)
{
	return bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *kprobe1_bpf__elf_bytes(size_t *sz);

static inline int
kprobe1_bpf__create_skeleton(struct kprobe1_bpf *obj)
{
	struct bpf_object_skeleton *s;
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "kprobe1_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = sizeof(*s->maps);
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt, s->map_skel_sz);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	s->maps[0].name = "pid_map";
	s->maps[0].map = &obj->maps.pid_map;

	s->maps[1].name = "kprobe1_.rodata";
	s->maps[1].map = &obj->maps.rodata;
	s->maps[1].mmaped = (void **)&obj->rodata;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "bpf_prog";
	s->progs[0].prog = &obj->progs.bpf_prog;
	s->progs[0].link = &obj->links.bpf_prog;

	s->progs[1].name = "bpf_prog2";
	s->progs[1].prog = &obj->progs.bpf_prog2;
	s->progs[1].link = &obj->links.bpf_prog2;

	s->data = (void *)kprobe1_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *kprobe1_bpf__elf_bytes(size_t *sz)
{
	*sz = 4856;
	return (const void *)"\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xf8\x0e\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x10\0\
\x01\0\x85\0\0\0\x05\0\0\0\x95\0\0\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\xbf\x06\0\0\0\
\0\0\0\x77\x06\0\0\x20\0\0\0\x63\x6a\xfc\xff\0\0\0\0\x85\0\0\0\x05\0\0\0\x7b\
\x0a\xf0\xff\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x23\0\0\0\
\xbf\x63\0\0\0\0\0\0\xbf\x04\0\0\0\0\0\0\x85\0\0\0\x06\0\0\0\xbf\xa2\0\0\0\0\0\
\0\x07\x02\0\0\xfc\xff\xff\xff\xbf\xa3\0\0\0\0\0\0\x07\x03\0\0\xf0\xff\xff\xff\
\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x04\0\0\0\0\0\0\x85\0\0\0\x02\0\0\0\
\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\
\x63\x0a\xfc\xff\0\0\0\0\xbf\xa2\0\0\0\0\0\0\x07\x02\0\0\xfc\xff\xff\xff\x18\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x85\0\0\0\x01\0\0\0\x15\0\x0b\0\0\0\0\0\x79\
\x01\0\0\0\0\0\0\xb7\x02\0\0\x65\0\0\0\x2d\x12\x08\0\0\0\0\0\x61\xa3\xfc\xff\0\
\0\0\0\x67\x03\0\0\x20\0\0\0\xc7\x03\0\0\x20\0\0\0\x5d\x31\x04\0\0\0\0\0\x18\
\x01\0\0\x23\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x20\0\0\0\x85\0\0\0\x06\0\0\0\
\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\
\x50\x4c\0\x42\x50\x46\x20\x74\x72\x69\x67\x67\x65\x72\x65\x64\x20\x66\x72\x6f\
\x6d\x20\x50\x49\x44\x20\x25\x64\x20\x61\x74\x20\x25\x6c\x64\x2e\x0a\0\x50\x72\
\x6f\x63\x65\x73\x73\x20\x63\x6c\x6f\x73\x65\x64\x20\x63\x6f\x6e\x6e\x65\x63\
\x74\x69\x6f\x6e\x20\x25\x64\x0a\x3a\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\0\x18\0\0\0\0\0\0\0\x4c\x03\0\0\x4c\
\x03\0\0\x50\x03\0\0\0\0\0\0\0\0\0\x02\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\
\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\x01\0\0\0\x05\0\0\0\
\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\
\0\0\0\x02\0\0\0\x04\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\x02\x02\0\0\0\0\0\0\0\x04\0\
\0\x04\x20\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\x40\0\0\0\x2a\
\0\0\0\x07\0\0\0\x80\0\0\0\x2e\0\0\0\x07\0\0\0\xc0\0\0\0\x34\0\0\0\0\0\0\x0e\
\x08\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0d\x0b\0\0\0\x3c\0\0\0\0\0\0\x08\x0c\0\0\0\
\x40\0\0\0\0\0\0\x08\x0d\0\0\0\x46\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\x59\0\0\
\0\x01\0\0\x0c\x0a\0\0\0\0\0\0\0\0\0\0\x02\x10\0\0\0\xcf\0\0\0\x15\0\0\x04\xa8\
\0\0\0\xd7\0\0\0\x11\0\0\0\0\0\0\0\xdb\0\0\0\x11\0\0\0\x40\0\0\0\xdf\0\0\0\x11\
\0\0\0\x80\0\0\0\xe3\0\0\0\x11\0\0\0\xc0\0\0\0\xe7\0\0\0\x11\0\0\0\0\x01\0\0\
\xea\0\0\0\x11\0\0\0\x40\x01\0\0\xed\0\0\0\x11\0\0\0\x80\x01\0\0\xf1\0\0\0\x11\
\0\0\0\xc0\x01\0\0\xf5\0\0\0\x11\0\0\0\0\x02\0\0\xf8\0\0\0\x11\0\0\0\x40\x02\0\
\0\xfb\0\0\0\x11\0\0\0\x80\x02\0\0\xfe\0\0\0\x11\0\0\0\xc0\x02\0\0\x01\x01\0\0\
\x11\0\0\0\0\x03\0\0\x04\x01\0\0\x11\0\0\0\x40\x03\0\0\x07\x01\0\0\x11\0\0\0\
\x80\x03\0\0\x0a\x01\0\0\x11\0\0\0\xc0\x03\0\0\x12\x01\0\0\x11\0\0\0\0\x04\0\0\
\x15\x01\0\0\x11\0\0\0\x40\x04\0\0\x18\x01\0\0\x11\0\0\0\x80\x04\0\0\x1e\x01\0\
\0\x11\0\0\0\xc0\x04\0\0\x21\x01\0\0\x11\0\0\0\0\x05\0\0\x24\x01\0\0\0\0\0\x01\
\x08\0\0\0\x40\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x32\x01\0\0\x0f\0\0\0\x36\
\x01\0\0\x01\0\0\x0c\x12\0\0\0\0\0\0\0\x01\0\0\x0d\x02\0\0\0\x32\x01\0\0\x0f\0\
\0\0\x3d\x02\0\0\x01\0\0\x0c\x14\0\0\0\x0a\x03\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\
\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x16\0\0\0\x04\0\0\0\x0d\0\0\0\x0f\x03\0\0\0\0\0\
\x0e\x17\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x16\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\
\x19\0\0\0\x04\0\0\0\x23\0\0\0\x17\x03\0\0\0\0\0\x0e\x1a\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\0\0\0\x19\0\0\0\x04\0\0\0\x20\0\0\0\x28\x03\0\0\0\0\0\x0e\x1c\0\0\
\0\0\0\0\0\x3a\x03\0\0\x01\0\0\x0f\0\0\0\0\x09\0\0\0\0\0\0\0\x20\0\0\0\x40\x03\
\0\0\x02\0\0\x0f\0\0\0\0\x1b\0\0\0\0\0\0\0\x23\0\0\0\x1d\0\0\0\x23\0\0\0\x20\0\
\0\0\x48\x03\0\0\x01\0\0\x0f\0\0\0\0\x18\0\0\0\0\0\0\0\x0d\0\0\0\0\x69\x6e\x74\
\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\
\0\x74\x79\x70\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x6b\x65\x79\
\0\x76\x61\x6c\x75\x65\0\x70\x69\x64\x5f\x6d\x61\x70\0\x75\x36\x34\0\x5f\x5f\
\x75\x36\x34\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\
\x6e\x67\0\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x74\x69\x6d\x65\0\
\x2e\x74\x65\x78\x74\0\x2f\x68\x6f\x6d\x65\x2f\x6d\x65\x72\x69\x6e\x2f\x44\x65\
\x73\x6b\x74\x6f\x70\x2f\x43\x4f\x44\x41\x58\x2f\x73\x72\x63\x2f\x5f\x6d\x6f\
\x6e\x69\x74\x6f\x72\x2f\x6b\x70\x72\x6f\x62\x65\x31\x2e\x62\x70\x66\x2e\x63\0\
\x09\x75\x36\x34\x20\x74\x73\x20\x3d\x20\x62\x70\x66\x5f\x6b\x74\x69\x6d\x65\
\x5f\x67\x65\x74\x5f\x6e\x73\x28\x29\x3b\0\x09\x72\x65\x74\x75\x72\x6e\x20\x74\
\x73\x3b\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\x31\x34\0\x72\x31\
\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\x31\x30\0\x72\x39\0\
\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\0\x6f\x72\x69\x67\
\x5f\x61\x78\0\x69\x70\0\x63\x73\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x73\x73\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x74\x78\0\x62\x70\
\x66\x5f\x70\x72\x6f\x67\0\x6b\x70\x72\x6f\x62\x65\x2f\x5f\x5f\x78\x36\x34\x5f\
\x73\x79\x73\x5f\x61\x63\x63\x65\x70\x74\0\x09\x69\x6e\x74\x20\x70\x69\x64\x20\
\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\
\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\x20\x20\x20\
\x20\x75\x36\x34\x20\x73\x74\x61\x72\x74\x5f\x74\x69\x6d\x65\x20\x3d\x20\x67\
\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x74\x69\x6d\x65\x28\x29\x3b\0\x09\
\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x42\x50\x46\x20\x74\x72\x69\
\x67\x67\x65\x72\x65\x64\x20\x66\x72\x6f\x6d\x20\x50\x49\x44\x20\x25\x64\x20\
\x61\x74\x20\x25\x6c\x64\x2e\x5c\x6e\x22\x2c\x20\x70\x69\x64\x2c\x73\x74\x61\
\x72\x74\x5f\x74\x69\x6d\x65\x29\x3b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x6d\x61\
\x70\x5f\x75\x70\x64\x61\x74\x65\x5f\x65\x6c\x65\x6d\x28\x26\x70\x69\x64\x5f\
\x6d\x61\x70\x2c\x20\x26\x70\x69\x64\x2c\x26\x73\x74\x61\x72\x74\x5f\x74\x69\
\x6d\x65\x2c\x20\x42\x50\x46\x5f\x41\x4e\x59\x29\x3b\0\x20\x20\x20\x20\x72\x65\
\x74\x75\x72\x6e\x20\x30\x3b\0\x62\x70\x66\x5f\x70\x72\x6f\x67\x32\0\x6b\x70\
\x72\x6f\x62\x65\x2f\x74\x63\x70\x5f\x63\x6c\x6f\x73\x65\0\x09\x75\x36\x34\x20\
\x2a\x70\x69\x64\x5f\x70\x74\x72\x20\x3d\x20\x62\x70\x66\x5f\x6d\x61\x70\x5f\
\x6c\x6f\x6f\x6b\x75\x70\x5f\x65\x6c\x65\x6d\x28\x26\x70\x69\x64\x5f\x6d\x61\
\x70\x2c\x20\x26\x70\x69\x64\x29\x3b\0\x20\x20\x20\x20\x69\x66\x20\x28\x70\x69\
\x64\x5f\x70\x74\x72\x20\x21\x3d\x20\x4e\x55\x4c\x4c\x20\x26\x26\x20\x2a\x70\
\x69\x64\x5f\x70\x74\x72\x20\x3d\x3d\x20\x70\x69\x64\x20\x26\x26\x20\x2a\x70\
\x69\x64\x5f\x70\x74\x72\x3e\x31\x30\x30\x55\x4c\x4c\x29\x20\x7b\0\x20\x20\x20\
\x20\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\x69\x6e\x74\x6b\x28\x22\x50\x72\
\x6f\x63\x65\x73\x73\x20\x63\x6c\x6f\x73\x65\x64\x20\x63\x6f\x6e\x6e\x65\x63\
\x74\x69\x6f\x6e\x20\x25\x64\x5c\x6e\x3a\x20\x22\x2c\x70\x69\x64\x29\x3b\0\x63\
\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x62\x70\x66\x5f\x70\x72\x6f\x67\
\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x62\x70\x66\x5f\x70\x72\x6f\x67\x32\x2e\x5f\
\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\0\
\x6c\x69\x63\x65\x6e\x73\x65\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x34\0\0\0\x34\0\
\0\0\x8c\x01\0\0\xc0\x01\0\0\0\0\0\0\x08\0\0\0\x6a\0\0\0\x01\0\0\0\0\0\0\0\x0e\
\0\0\0\x3f\x01\0\0\x01\0\0\0\0\0\0\0\x13\0\0\0\x47\x02\0\0\x01\0\0\0\0\0\0\0\
\x15\0\0\0\x10\0\0\0\x6a\0\0\0\x02\0\0\0\0\0\0\0\x70\0\0\0\xa5\0\0\0\x0b\x54\0\
\0\x08\0\0\0\x70\0\0\0\xc3\0\0\0\x02\x58\0\0\x3f\x01\0\0\x09\0\0\0\0\0\0\0\x70\
\0\0\0\x57\x01\0\0\x0c\x8c\0\0\x10\0\0\0\x70\0\0\0\x57\x01\0\0\x27\x8c\0\0\x18\
\0\0\0\x70\0\0\0\x57\x01\0\0\x06\x8c\0\0\x20\0\0\0\x70\0\0\0\xa5\0\0\0\x0b\x54\
\0\0\x28\0\0\0\x70\0\0\0\x84\x01\0\0\x09\x90\0\0\x30\0\0\0\x70\0\0\0\xad\x01\0\
\0\x02\x94\0\0\x68\0\0\0\x70\0\0\0\0\0\0\0\0\0\0\0\x80\0\0\0\x70\0\0\0\xf1\x01\
\0\0\x05\x98\0\0\xa0\0\0\0\x70\0\0\0\x2f\x02\0\0\x05\x9c\0\0\x47\x02\0\0\x0c\0\
\0\0\0\0\0\0\x70\0\0\0\x57\x01\0\0\x0c\xb4\0\0\x08\0\0\0\x70\0\0\0\x57\x01\0\0\
\x27\xb4\0\0\x10\0\0\0\x70\0\0\0\x57\x01\0\0\x06\xb4\0\0\x20\0\0\0\x70\0\0\0\0\
\0\0\0\0\0\0\0\x28\0\0\0\x70\0\0\0\x58\x02\0\0\x11\xb8\0\0\x40\0\0\0\x70\0\0\0\
\x8d\x02\0\0\x19\xc0\0\0\x48\0\0\0\x70\0\0\0\x8d\x02\0\0\x1c\xc0\0\0\x58\0\0\0\
\x70\0\0\0\x8d\x02\0\0\x2c\xc0\0\0\x60\0\0\0\x70\0\0\0\0\0\0\0\0\0\0\0\x78\0\0\
\0\x70\0\0\0\x8d\x02\0\0\x2c\xc0\0\0\x80\0\0\0\x70\0\0\0\xce\x02\0\0\x09\xc4\0\
\0\xa0\0\0\0\x70\0\0\0\x2f\x02\0\0\x05\xd4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x03\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\x01\0\x08\0\0\0\0\
\0\0\0\0\0\x23\0\0\0\0\0\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\xcf\0\0\0\0\0\x05\0\xa0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x41\0\0\0\x01\0\x08\0\
\x23\0\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\x03\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x95\0\0\0\x12\0\x02\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x61\0\0\0\
\x12\0\x03\0\0\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\x59\0\0\0\x11\0\x09\0\0\0\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\xd6\0\0\0\x12\0\x05\0\0\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\
\0\xc7\0\0\0\x11\0\x07\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\
\x01\0\0\0\x07\0\0\0\x80\0\0\0\0\0\0\0\x01\0\0\0\x0a\0\0\0\x28\0\0\0\0\0\0\0\
\x01\0\0\0\x0a\0\0\0\x80\0\0\0\0\0\0\0\x01\0\0\0\x07\0\0\0\x20\x03\0\0\0\0\0\0\
\x04\0\0\0\x0a\0\0\0\x38\x03\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x44\x03\0\0\0\0\0\
\0\x03\0\0\0\x07\0\0\0\x5c\x03\0\0\0\0\0\0\x04\0\0\0\x0c\0\0\0\x2c\0\0\0\0\0\0\
\0\x04\0\0\0\x01\0\0\0\x3c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x4c\0\0\0\0\0\0\0\
\x04\0\0\0\x04\0\0\0\x60\0\0\0\0\0\0\0\x04\0\0\0\x01\0\0\0\x70\0\0\0\0\0\0\0\
\x04\0\0\0\x01\0\0\0\x88\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x98\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\xa8\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xb8\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\xc8\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xd8\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\xe8\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\xf8\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x08\x01\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x20\x01\0\0\0\0\0\
\0\x04\0\0\0\x04\0\0\0\x30\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x40\x01\0\0\0\0\
\0\0\x04\0\0\0\x04\0\0\0\x50\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x60\x01\0\0\0\
\0\0\0\x04\0\0\0\x04\0\0\0\x70\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x80\x01\0\0\
\0\0\0\0\x04\0\0\0\x04\0\0\0\x90\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\xa0\x01\0\
\0\0\0\0\0\x04\0\0\0\x04\0\0\0\xb0\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\xc0\x01\
\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\xd0\x01\0\0\0\0\0\0\x04\0\0\0\x04\0\0\0\x13\
\x15\x16\x04\x14\x07\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\
\x2e\x65\x78\x74\0\x2e\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x5f\x5f\x78\x36\
\x34\x5f\x73\x79\x73\x5f\x61\x63\x63\x65\x70\x74\0\x62\x70\x66\x5f\x70\x72\x6f\
\x67\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x62\x70\x66\x5f\x70\x72\x6f\x67\x32\x2e\
\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x6d\x61\x70\x73\0\x70\x69\x64\x5f\x6d\x61\
\x70\0\x62\x70\x66\x5f\x70\x72\x6f\x67\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\
\x72\x73\x69\x67\0\x2e\x72\x65\x6c\x6b\x70\x72\x6f\x62\x65\x2f\x74\x63\x70\x5f\
\x63\x6c\x6f\x73\x65\0\x6c\x69\x63\x65\x6e\x73\x65\0\x67\x65\x74\x5f\x63\x75\
\x72\x72\x65\x6e\x74\x5f\x74\x69\x6d\x65\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\
\x73\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\
\x42\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\x4c\x42\x42\x32\x5f\x34\0\x62\x70\
\x66\x5f\x70\x72\x6f\x67\x32\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\xa6\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x16\x0e\0\0\0\0\0\0\
\xe0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\0\0\0\x01\0\0\0\x06\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\0\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\xf0\x0b\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x0f\0\0\0\x03\0\0\0\x08\0\0\
\0\0\0\0\0\x10\0\0\0\0\0\0\0\x7c\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\xb0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x78\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x10\x0c\0\0\
\0\0\0\0\x20\0\0\0\0\0\0\0\x0f\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\
\0\0\x8d\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb0\x01\0\0\0\0\0\0\
\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb6\0\0\0\
\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xbd\x01\0\0\0\0\0\0\x43\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x53\0\0\0\x01\0\0\0\x03\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x02\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc2\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x20\x02\0\0\0\0\0\0\xb4\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\xbe\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x30\x0c\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x0f\0\0\0\x0a\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\x0b\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd4\x08\
\0\0\0\0\0\0\xe0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\x07\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x0c\0\0\0\0\0\0\
\xa0\x01\0\0\0\0\0\0\x0f\0\0\0\x0c\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\
\x6a\0\0\0\x03\x4c\xff\x6f\0\0\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\x10\x0e\0\0\0\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xae\0\0\
\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb8\x0a\0\0\0\0\0\0\x38\x01\0\0\0\
\0\0\0\x01\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";
}

#ifdef __cplusplus
struct kprobe1_bpf *kprobe1_bpf::open(const struct bpf_object_open_opts *opts) { return kprobe1_bpf__open_opts(opts); }
struct kprobe1_bpf *kprobe1_bpf::open_and_load() { return kprobe1_bpf__open_and_load(); }
int kprobe1_bpf::load(struct kprobe1_bpf *skel) { return kprobe1_bpf__load(skel); }
int kprobe1_bpf::attach(struct kprobe1_bpf *skel) { return kprobe1_bpf__attach(skel); }
void kprobe1_bpf::detach(struct kprobe1_bpf *skel) { kprobe1_bpf__detach(skel); }
void kprobe1_bpf::destroy(struct kprobe1_bpf *skel) { kprobe1_bpf__destroy(skel); }
const void *kprobe1_bpf::elf_bytes(size_t *sz) { return kprobe1_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
kprobe1_bpf__assert(struct kprobe1_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __KPROBE1_BPF_SKEL_H__ */
